#!/usr/bin/env perl

use strictures;

use Getopt::Long  ();
use Pod::Usage    ();
use Crypt::Random ();

my $opt = {};
Getopt::Long::GetOptions(
    'length=i' => \$opt->{length},
    'version'  => \$opt->{version},
    'help'     => \$opt->{help},
    'man'      => \$opt->{man}
) or Pod::Usage::pod2usage(1);

Pod::Usage::pod2usage( -exitval => 0, -verbose => 2, noperldoc => 1 ) if $opt->{man};
Pod::Usage::pod2usage(0) if $opt->{help};

$opt->{length} ||= 12;    # default to 12

my @characters = ( 'A' .. 'Z', 'a' .. 'z', 0 .. 9 );
my $password   = join '', map {
    @characters[ Crypt::Random::makerandom_itv( Lower => 0, Upper => scalar @characters ) ]
} 1 .. $opt->{length};

print $password . "\n";

exit;

__END__

=pod

=head1 NAME

password - generate cryptographically secure passwords

=head1 SYNOPSIS

  password [--length] [--help] [--man]

=head1 OPTIONS

  --length    how long you want the password (defaults to 12)
  --help      print this dialogue
  --man       display the full documentation

=head1 DESCRIPTION

This script generates cryptographically secure random passwords, using alphanumeric characters with case variation.

=cut

=head1 EXAMPLES

=over

=item Get a 12 character length password

  password

=item Get a 32 character length password

  password --length 32

=back

=head1 DEPENDENCIES

=over

=item strictures

=item Getopt::Long

=item Pod::Usage

=item Crypt::Random

=back

=head1 AUTHOR

Blaine Motsinger L<< <blaine@renderorange.com> >>

=cut
