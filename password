#!/usr/bin/env perl
package password;

use strict;
use warnings;

use Getopt::Long         ();
use Pod::Usage           ();
use Math::Random::Secure ();

our $VERSION = '3.01';

__PACKAGE__->_run( \@ARGV ) unless caller;

sub new {
    my $class      = shift;
    my $attributes = {
        length  => undef,
        special => undef,
        @_,
    };

    die "length must be a positive integer\n"
        if $attributes->{length} !~ /^\d+$/ || $attributes->{length} < 1;

    my $self = $attributes;

    bless $self, $class;

    return $self;
}

sub generate {
    my $self = shift;

    my @characters = ( 'A' .. 'Z', 'a' .. 'z', 0 .. 9 );

    if ( $self->{special} ) {
        push @characters,
             ( '!', '$', '%', '&', '*',
               '+', '-', '.', '#', ':',
               '=', '?', '@', '^', '_' );
    }

    my $password   = join '', map {
        $characters[ Math::Random::Secure::irand( scalar @characters - 1 ) ]
    } 1 .. $self->{length};

    return $password;
}

sub _run {
    my $class = shift;
    my $args  = shift;

    # define the defaults
    my $opt = { length => 12 };

    Getopt::Long::GetOptionsFromArray(
        $args,
        'length=i' => \$opt->{length},
        'special!' => \$opt->{special},
        'version'  => \$opt->{version},
        'help'     => \$opt->{help},
    ) or Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 );

    Pod::Usage::pod2usage( -exitval => 0, -verbose => 1 ) if $opt->{help};

    if ( $opt->{version} ) {
        print "$VERSION\n";
        return;
    }

    my $object = $class->new( length => $opt->{length}, special => $opt->{special} );

    print $object->generate() . "\n";

    return;
}

1;

__END__

=pod

=head1 NAME

password - generate cryptographically secure passwords

=head1 SYNOPSIS

  password [--length <int>] [--special|--no-special]
           [--version]
           [--help]

=head1 OPTIONS

=over

=item --length <int>

how long you want the password (defaults to 12)

=item --special | --no-special

should there be special characters in the password

=item --version

print the version and exit

=item --help

print this dialogue

=back

=head1 DESCRIPTION

password generates cryptographically secure random passwords, using alphanumeric characters with case variation and optionally special characters.

The logic can be used directly as a script or used as a module.

=head1 EXAMPLES

=head2 As a script

=over

=item Get a 12 character length password

  password

=item Get a 32 character length password

  password --length 32

=item Get a 32 character length password with special characters

  password --length 32 --special

=back

=head2 As a module

=over

=item Get a 12 character length password

  require 'password';
  my $object = password->new( length => 12 );

  print $object->generate() . "\n";

=item Get a 32 character length password

  require 'password';
  my $object = password->new( length => 32 );

  print $object->generate() . "\n";

=item Get a 32 character length password with special characters

  require 'password';
  my $object = password->new( length => 32, special => 1 );

  print $object->generate() . "\n";

=back

=head1 SUBROUTINES/METHODS

=head2 new

Constructor for the password object.

=head3 ARGUMENTS

=over

=item length

The length of the password to be generated.

Must be a positive integer.

=back

=head3 RETURNS

The password object.

=head3 EXCEPTIONS

=over

=item length must be a positive integer

This exception is thrown when verification of the length argument doesn't pass.

=back

=head2 generate

Generates the password based on the length as defined through the constructor.

=head3 ARGUMENTS

None.

=head3 RETURNS

The generated password string.

=head1 EXIT STATUS

=over

=item 0 - Indicates completion without failure

=item 1 - Indicates failure

=back

=head1 DEPENDENCIES

=over

=item Getopt::Long

=item Pod::Usage

=item Math::Random::Secure

=back

=head1 AUTHOR

Blaine Motsinger, <blaine@renderorange.com>

=head1 LICENSE AND COPYRIGHT

This software is available under the MIT license.

Copyright (c) 2022 Blaine Motsinger

=cut
